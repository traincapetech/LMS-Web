import { Component } from 'react';
/** Models */
import { type MessageData } from './models/message-data.model';
/** CSS */
import './css/iframe.css';
import './css/LoadingSpinner.css';
interface Props {
    checkoutId?: string;
    chargeId?: string;
    customMetadata?: string;
    onLoad?: () => void;
    onChargeSuccess?: (data: MessageData) => void;
    onChargeFailure?: (data: MessageData) => void;
    onPaymentDetected?: (data: MessageData) => void;
    onError: (data: MessageData) => void;
    onModalClose: () => void;
    disableCaching: boolean;
}
interface State {
    loading: boolean;
    src: null | string;
}
export declare class Iframe extends Component<Props, State> {
    private readonly origin;
    private readonly uuid;
    private readonly listenerHandleMessage;
    constructor(props: Props);
    componentDidMount(): void;
    componentWillUnmount(): void;
    render(): JSX.Element;
    private generateUUID;
    private buildSrc;
    private isValidMessage;
    private handleMessage;
    private handleIFrameLoaded;
}
export {};
//# sourceMappingURL=iframe.d.ts.map