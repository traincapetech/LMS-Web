import { Component, ButtonHTMLAttributes } from 'react';

type Network = 'bitcoin' | 'bitcoincash' | 'ethereum' | 'litecoin' | 'dogecoin';

type PaymentStatus = 'NEW' | 'PENDING' | 'CONFIRMED' | 'FAILED';
interface Payment {
    network: Network;
    transactionId: string;
    status: PaymentStatus;
    value: {
        crypto: {
            amount: string;
            currency: string;
        };
        local: {
            amount: string;
            currency: string;
        };
    };
    block: {
        height?: number;
        hash?: string;
        confirmations: number;
        confirmationsRequired: number;
    };
}

interface ChargePricing {
    local: {
        amount: string;
        currency: string;
    };
    bitcoin: {
        amount: string;
        currency: string;
    };
    bitcoincash: {
        amount: string;
        currency: string;
    };
    ethereum: {
        amount: string;
        currency: string;
    };
    litecoin: {
        amount: string;
        currency: string;
    };
    dogecoin: {
        amount: string;
        currency: string;
    };
}
interface ChargeState {
    status: string;
    context: any;
    payment?: {
        network: Network;
        transactionId: string;
    };
}
interface Charge {
    code: string;
    createdAt: string;
    confirmedAt?: string;
    expiresAt: string;
    addresses: Record<string, string>;
    pricingType: 'fixed_price' | 'no_price';
    pricing?: ChargePricing;
    payments: Payment[];
    timeline: ChargeState[];
    name?: string;
    description?: string;
    logoUrl?: string;
    redirectUrl: string | undefined;
    thirdPartyProvider?: string;
    checkout?: {
        id: string;
    };
}

type EventType = 'charge:created' | 'charge:failed' | 'charge_confirmed' | 'charge_failed' | 'payment_detected' | 'error_not_found' | 'checkout_modal_closed';
interface MessageData {
    event: EventType;
    charge: Charge;
}

interface Props {
    styled: boolean;
    checkoutId?: string;
    chargeId?: string;
    customMetadata?: string;
    onLoad?: () => void;
    onChargeSuccess?: (data: MessageData) => void;
    onChargeFailure?: (data: MessageData) => void;
    onPaymentDetected?: (data: MessageData) => void;
    onModalClosed?: () => void;
    disableCaching: boolean;
    wrapperStyle?: Record<string, number | string>;
}
interface State {
    showModal: boolean;
}
declare class CoinbaseCommerceButton extends Component<Props & ButtonHTMLAttributes<any>, State> {
    static defaultProps: {
        styled: boolean;
        disableCaching: boolean;
    };
    constructor(props: Props);
    private onClick;
    private onModalClose;
    private handleError;
    private getButtonProps;
    render(): JSX.Element;
}

export { CoinbaseCommerceButton };
